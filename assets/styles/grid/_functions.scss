// Ascending
// Used to evaluate Sass maps like our grid breakpoints
@mixin assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;

  @each $key, $num in $map {
    @if not $prev-num or math.unit($num) == '%' or math.unit($prev-num) == '%' {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }

    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero - used to ensure the min-width of the lowest breakpoint starts at 0
@mixin assert-starts-at-zero($map, $map-name: '$grid-breakpoints') {
  @if length($map) > 0 {
    $values: map.values($map);
    $first-value: list.nth($values, 1);

    @if $first-value != 0 {
      @warn "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.";
    }
  }
}

@function divide($dividend, $divisor, $precision: 10) {
  $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);
  $dividend: math.abs($dividend);
  $divisor: math.abs($divisor);

  @if $dividend == 0 {
    @return 0;
  }

  @if $divisor == 0 {
    @error "Cannot divide by 0";
  }

  $remainder: $dividend;
  $result: 0;
  $factor: 10;

  @while $remainder > 0 and $precision >= 0 {
    $quotient: 0;

    @while $remainder >= $divisor {
      $remainder: $remainder - $divisor;
      $quotient: $quotient + 1;
    }

    $result: $result * 10 + $quotient;
    $factor: $factor * 0.1;
    $remainder: $remainder * 10;
    $precision: $precision - 1;

    @if $precision < 0 and $remainder >= $divisor * 5 {
      $result: $result + 1;
    }
  }

  $result: $result * $factor * $sign;
  $dividend-unit: math.unit($dividend);
  $divisor-unit: math.unit($divisor);
  $unit-map: (
    'px': 1px,
    'rem': 1rem,
    'em': 1em,
    '%': 1%,
  );

  @if $dividend-unit != $divisor-unit and map.has-key($unit-map, $dividend-unit) {
    $result: $result * map.get($unit-map, $dividend-unit);
  }

  @return $result;
}
